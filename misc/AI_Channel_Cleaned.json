{
  "name": "AI-Channel Cleaned",
  "nodes": [
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent?key=AIzaSyD2Pd5hS19BhgQt0B9W7foILS5hPRKMaLQ",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{ JSON.stringify({\n  contents: [{\n    parts: [{ text: $json.text }]\n  }],\n  generationConfig: {\n    responseModalities: [\"AUDIO\"],\n    speechConfig: {\n      voiceConfig: {\n        prebuiltVoiceConfig: { voiceName: \"puck\" }\n      }\n    }\n  },\n  model: \"gemini-2.5-flash-preview-tts\"\n}) }}\n",
        "headerParametersJson": "{\n  \"Content-Type\": \"application/json\"\n}\n"
      },
      "id": "be47dad4-1405-4f20-a9f0-d46837c494c1",
      "name": "Gemini TTS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1040,
        -460
      ]
    },
    {
      "parameters": {
        "mode": "jsonToBinary",
        "convertAllData": false,
        "sourceKey": "candidates.0.content.parts.0.inlineData.data",
        "destinationKey": "audio_pcm",
        "options": {
          "encoding": "base64",
          "fileName": "voice.pcm",
          "mimeType": "audio/L16;rate=24000"
        }
      },
      "id": "50a381da-8c04-49ff-bb1b-4939c484ad12",
      "name": "Base64 to Binary",
      "type": "n8n-nodes-base.moveBinaryData",
      "typeVersion": 1,
      "position": [
        1260,
        -460
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "url": "https://api.replicate.com/v1/predictions",
        "jsonParameters": true,
        "options": {},
        "headerParametersJson": "={\"Authorization\":\"Token YOUR_REPLICATE_API_TOKEN\",\"Content-Type\":\"application/json\"}"
      },
      "id": "535e49fd-ce07-49fa-bdbe-1066670c62b7",
      "name": "Create SVD",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1220,
        0
      ]
    },
    {
      "parameters": {
        "amount": 20,
        "unit": "seconds"
      },
      "id": "2c840d17-a51e-4547-87b2-b88a74edd539",
      "name": "Wait 20s",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1460,
        0
      ],
      "webhookId": "b268ebe9-dbcc-40a8-bea4-5ff919323967"
    },
    {
      "parameters": {
        "url": "={{\"https://api.replicate.com/v1/predictions/\"+$node[\\\"Create SVD\\\"].json[\"id\"]}}",
        "jsonParameters": true,
        "options": {},
        "headerParametersJson": "={\"Authorization\":\"Token YOUR_REPLICATE_API_TOKEN\"}"
      },
      "id": "d6208ae4-9b40-4afb-ad21-1e84965c5260",
      "name": "Get SVD Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1700,
        0
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "video_url",
              "value": "={{ $json[\"output\"][0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "8bc580da-10ac-433f-9948-aa0b683f885f",
      "name": "Set URLs",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        1940,
        0
      ]
    },
    {
      "parameters": {
        "url": "={{ $json[\"video_url\"] }}",
        "responseFormat": "file",
        "options": {}
      },
      "id": "0dbc6ab9-b8cc-4fc6-85a0-3edabf8542bc",
      "name": "Download Video",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        2180,
        0
      ]
    },
    {
      "parameters": {
        "command": "auto-editor video.mp4 --add_audio audio.mp3 --output merged.mp4 --silent_threshold 2"
      },
      "id": "15d7a447-9bbf-480a-82ff-9ef3ab726098",
      "name": "Auto-Editor Merge",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2420,
        0
      ]
    },
    {
      "parameters": {
        "command": "whisperx merged.mp4 --output_format srt --device cpu"
      },
      "id": "9071ad5c-d7bd-4636-bf2f-b42ead314043",
      "name": "WhisperX Captions",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2660,
        0
      ]
    },
    {
      "parameters": {
        "command": "ffmpeg -i merged.mp4 -vf subtitles=merged.srt:force_style='Fontsize=24' -c:a copy final.mp4 -y"
      },
      "id": "02e41901-2b94-44c8-969b-8a98a159a819",
      "name": "Burn Captions",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2900,
        0
      ]
    },
    {
      "parameters": {
        "url": "https://hn.algolia.com/api/v1/search_by_date?query=artificialintelligence&tags=story&hitsPerPage=1",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -40,
        -460
      ],
      "id": "29cb37b4-5254-4b65-bae4-6946f688cbfe",
      "name": "Algolia"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -220,
        -460
      ],
      "id": "ed5003fc-8d99-451f-a57a-f4660cfe52c9",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "url": "={{ $json.hits[0].url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        -460
      ],
      "id": "5c11771f-acbc-4def-83e9-fea40fb074aa",
      "name": "Visit URL"
    },
    {
      "parameters": {
        "jsCode": "// Step 1: Import the necessary libraries\nconst { JSDOM } = require('jsdom');\nconst { Readability } = require('@mozilla/readability');\n\n// Step 2: Get the HTML content from the previous node\nconst html = $input.first().json.data;\nconst url = $('Algolia').first().json.hits[0].url;\n\ntry {\n  // Step 3: Parse the HTML\n  const doc = new JSDOM(html, {\n    url: url,\n  });\n\n  // Step 4: Run the Readability algorithm\n  const reader = new Readability(doc.window.document);\n  const article = reader.parse();\n\n  if (article) {\n    // ---- NEW: START OF IMAGE EXTRACTION LOGIC ----\n\n    // Create a new DOM from the CLEANED article HTML to find images within it\n    const articleDom = new JSDOM(article.content);\n    \n    // Find all 'img' elements inside the clean article\n    const images = articleDom.window.document.querySelectorAll('img');\n    \n    // Create an array of all the image 'src' URLs\n    const imageUrls = Array.from(images).map(img => img.src);\n\n    // ---- NEW: END OF IMAGE EXTRACTION LOGIC ----\n\n    // Step 5: Return the combined data\n    return [{\n      json: {\n        originalTitle: $('Algolia').first().json.hits[0].title,\n        url: $('Algolia').first().json.hits[0].url,\n        title: article.title,\n        textContent: article.textContent,\n        excerpt: article.excerpt,\n        imageUrls: imageUrls, // The new array of image URLs\n        length: article.length,\n      }\n    }];\n  } else {\n    return [{\n      json: {\n        error: \"Could not parse article content from this page.\"\n      }\n    }];\n  }\n\n} catch (e) {\n  const errorMessage = e instanceof Error ? e.message : String(e);\n  return [{\n    json: {\n      error: \"An unexpected error occurred.\",\n      errorMessage: errorMessage\n    }\n  }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        -460
      ],
      "id": "b5c0c3d1-5217-4dd4-a0f7-f7a105348af4",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create a 120-word viral tech-news script\nHeadline: {{ $json.originalTitle }},\ncontent: {{ $json.textContent }},\nContext URL: {{ $json.url }},\nRemember to start with an attention grabber, follow the pacing rules, and end with a compelling call-to-action.\n\n",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "You are a social-video copywriter for an AI & Automation channel. Goals: hook scrollers in 3 sec, sustain retention 90 %+, spark shares. Techniques to use  1. Hook patterns: open-loop question, startling stat, “what if” scenario.  soarwithus.co  2. Optimal pacing: new visual beat every 3-5 s to avoid retention dips.  reddit.com  3. Psychological triggers: curiosity gaps, contrast, FOMO, emotion spikes.  provisorsthoughtleadership.com  4. Story formulas: AIDA, 3-Act, Hero’s Journey—pick one that fits.  buffer.com coolerinsights.com  5. CTA: explicit ask to share/⁠comment using urgency or challenge.  sprinklr.com socialpilot.co  Tone: conversational, high-energy, under 120 words. Output in plain text, no hashtags."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        680,
        -460
      ],
      "id": "05040717-83ce-4194-830e-96a0aedcec6e",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "deepseek-chat",
          "mode": "list",
          "cachedResultName": "deepseek-chat"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        740,
        -240
      ],
      "id": "37d0ad2f-4775-4bae-ad41-40099105091e",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "DBcam76KQWGqH3KJ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "executeOnce": false,
        "command": "echo \"{{ $binary.audio_pcm.filePath }}\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1540,
        -240
      ],
      "id": "516b9cb8-3816-48c9-86e0-2df4210a2d44",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "/tmp/audio_input.pcm",
        "dataPropertyName": "audio_pcm",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1720,
        -460
      ],
      "id": "0651c4fb-09ef-40be-9b41-7f7c88b0c70a",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"binary_keys\": \"value\",\n  \"my_field_2\": 1\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1480,
        -460
      ],
      "id": "f672c932-db29-4b2e-bf92-c435b20b1775",
      "name": "Edit Fields"
    }
  ],
  "pinData": {},
  "connections": {
    "Gemini TTS": {
      "main": [
        [
          {
            "node": "Base64 to Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Base64 to Binary": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create SVD": {
      "main": [
        [
          {
            "node": "Wait 20s",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 20s": {
      "main": [
        [
          {
            "node": "Get SVD Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get SVD Status": {
      "main": [
        [
          {
            "node": "Set URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set URLs": {
      "main": [
        [
          {
            "node": "Download Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Video": {
      "main": [
        [
          {
            "node": "Auto-Editor Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-Editor Merge": {
      "main": [
        [
          {
            "node": "WhisperX Captions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WhisperX Captions": {
      "main": [
        [
          {
            "node": "Burn Captions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Algolia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Algolia": {
      "main": [
        [
          {
            "node": "Visit URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Visit URL": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Gemini TTS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Create SVD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8295502b-e810-4e9e-897a-2061a20e8215",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "911abc6b57b0ee984467903efb70cf00d9d5f540e443d468029a9a930ad7a9bd"
  },
  "id": "Mjh6hvGvrCSbVUWw",
  "tags": []
}